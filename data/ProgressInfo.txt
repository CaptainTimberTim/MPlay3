********* Progress Info - DevLog? *********

22.09.2020
- Fixed shuffle not effecting playing songs, when it was already in playmode.
- Fixed Assert crash when there are more samples to be played than I write every frame (happened on output hardware change). 
- Fixed DisplayCursor not being updated in some situations.
- Cleaned up updating the sliders. Previously you had to always do it manually, which was error prone. Now the function that changes column positions itself handles the slider updates.
- Fixed bringDisplayEntryOnScreen stuff for search. How did that ever work?! Well now it does.

23.09.2020
- Large conversion of file/batch/playlist/displayable arrays to use their own id structs to make it _much_ clearer what is actually happening. This was long overdue for making the code easier to understanding!

24.09.2020
- Fixed bug where you could not properly select new song when a _up next_ song was playing.
- Fixed bug where the end of the song is sometimes cut off.
- Fixed bug where playing song was erroneously evicted and another song started playing in its place.

01.10.2020
- Fixed color not set, when selecting song and no song was playing
- Added DebugTimer feature, to time code blocks via StartTimer() and SnapTimer().
- Added double click for all columns except for song. Double click now selects all slots that are displayed. 
- Added double click for song column. It starts playing the clicked song or pauses it, when it was already playing.

02.10.2020
- Changed QuickSort3 in FillDisplayables to a much simpler RemoveCheckValue, as they actually do not need to be sorted at that point.
- Added a quit animation when pressing Esc. Now it does not just quit, instead you have to hold Esc for 1 second.
- Added quit animation also to alt+f4 and window X button with double speed.

03.10.2020
- Added error messaging for the user. Only for main thead yet.
- Added a error message queue for threading.

05.10.2020
- Added double-escape-press for fast/auto quit.
- Added a "wait for double-escape-press" in animation. 
- When a .mp3 decode/read error is detected and pushed to the user, now it will not crash if the song is pressed again.
- Finally added ReadEndOfFile to extract ID3v1 metadata without reading the entire file.
- Now properly searching for additional metadata in ID3v1, if ID3v2 or ID3v3 do not have all infos.
- Special keyboard key for PlayPause/Stop/Next/Previous are now processed even when application is not focused.

06.10.2020
- Fixed bug: Selecting song through search was crashing. Needed to call other procedure based on column type.
- Fixed bug: Making window bigger while a column is at the bottom repeated the last slot for the new incoming ones. Fixed by updating the column to look for overshooting the end and stop when hitting it.
- Fixed bug: Fixed array out of bounds assert made visible by fixing previous bug. Calculation of NewCursorID in ScrollDisplayColumn could be one too high.
- Started ColorPicker. Created color texture generation with blackness level.

07.10.2020
- Added local_string_compound to string api
- Added custom color palettes read and saved to settings file.
- Added custom color palette functionality, switching through them with F11.

08.10.2020
- Almost finished Color Picker basic setup, with color spectrum and picking.

11.10.2020
- Worked more on color picker. Most things already work, like...
	- selecting different colors for specific palettes
	- overwriting existing custom palettes
	- opening closing color picker
	
12.10.2020
- Finished the color picker, minus some user feedback stuff. 
	- Added palette name display, which is editable for the custom ones.
	- Added remove button, to delete custom palettes.
- Moved quit_animation to ui-api, but not yet adapted properly.

13.10.2020
- Added feedback for pressing the color picker buttons.
- Fixed a bug with determining the proper color for the picker in RGB to HSV conversion (H fell out of the 0-360 range).

14.10.2020
- Started converting from _load and decode entery file_ to decode only some mp3 frames at a time.

17.10.2020
- Implemented an arena allocator to switch to. As the original bucket allocator is too simple for my current needs.

18.10.2020
- Changed arena allocator quite a bit. Now it is simpler again, with no additional transient memory.
- Switched away from old bucket allocator to the new arena allocator. Average memory footprint is now ~1/4th.

19.10.2020
- Created new files for SoundJob procedures
- Created new files for SoundSerialization procedures
- Removed unnesessary dependencies in Renderer.c
- Switched all remaining .cpp files to .c files. Just for a bit more consistency. Maybe I should do it the other was round...
- Renamed Sound_Backend_TD.* to Sound_Thread_TD.*, to fit more what it actually contains. 
- Renamed Sound_TD.* to Sound_Backend_TD.*, as this name fits better to those files and they needed a suffix, as it was annoying to switch to them.
- Macro cleanup

26.10.2020
- Switched to a two stage .mp3 decoding procedure. Now it only preloads 5 seconds and only starts to fully load the one file that is selected for playing.

27.10.2020
- Reduced memory footprint by sizing the buffer for the loaded song properly. Should now be able to play .mp3 files of any size (smaller than 4GB)

28.10.2020
- Fixed bug with trying to read first .mp3 frame and not having the right metadata size (seems like faulty id3 tag data). Now it iteratively loads more of the file if the initial size was not enough until it can extract the first frame.

29.10.2020
- Implemented proper decode canceling for the full file decode. If the user skips through songs faster than decode speed. The decoding is now canceled and the new one is started immidiately after.
- Fixed song skip if decoding of file takes longer than preload time of currently 5 seconds. This is done by using the partially decoded song, up to the point it currently is decoded.

30.10.2020
- Fixed time overflow at the end of song.
- Added drag freezing for timeline slider, while song is not loaded.

01.11.2020
- Moved library files into separate folder.
- Removed the MiniMP3_Ext.h file from project, as it is no more needed.
- Fixing bugs found by mrmixer on handmade.network:
    - Added fix for AMD driver bug for Windows 7. NOTE:: Not confirmed if it works!
    - Fixed bug in metadata extraction for converting the year string to a u32.
    - Added check if the folder path in the library file exists. If not, just do the same as if no library file exists.
    - Added fixed framerate even when VSYNC is disabled in the user driver. 

02.11.2020
- Fixed bug with u32 underflow in BringDisplayablesOnScreen while calling a max function.

11.11.2020
- Fixed bug where making the vertical height of the window minimal the columns get scrolled to the bottom, because of a size < 0 error.
- Fixed bug introduced through splitting SwapBuffers off of DisplayBufferInWindow, by adding it everywhere.

12.11.2020
- Changed extracting the song duration from metadata, as it was sometimes wrong. I rather calculate it all the time based on loaded sample count and hz. Wrong metadata was causing errors in the timeline.
- Added popup to UI for the comming Help-shortcut button.
- Added barebones of shortcut-help stuff.

13.11.2020
- Implemented most of the shortcut-help popups.

14.11.2020
- Finished shortcut-help popups. 

12.03.2021
- Added small application that takes a file which can list resource files (like images and fonts) and converts those into an <output>.h with a C-Array for each of them. This enables the embedding of those files into the executable.
- column with not being saved sometimes.
- showing null in the window title bar.

18.03.2021
- Reduced the size of all icon files to the actual size used in the application, which not only makes the executable much smaller, but also the program startup faster, as the decoding has much less to do.
  Thirdly the icons now do not have these awfull looking edges (sad that it took me this long to realize what the problem was, this will also fix the issues with the font, when I get to doing it with that as well)
- Added a simple encoding which is much simpler than png and -for these specific icons- also almost as small. This makes the decoding on startup even faster.

21.03.2021
- Finally fixed font rendering. We now have actually nicer sampled textures and the small font does look way better now.

22.03.2021
- Fixed folder scan bug, where it did not work properly when the scanning was too quick.
- Added multithreading to metadata crawling and sped it up by 3.5x!

27.03.2021
- Started implementing proper utf-8 support.
- Over these week I made a lot of changes regarding font/unicode stuff (Forgot this file exists)
- Now loads fonts from Windows/Fonts if the default is missing the required codepoint.

10.04.2021
- Improved parsing of settings file to make it more robust.

11.04.2021
- Added found font caching to settings file.
- Installed cl profiler, because optimized compile-time went up recently from ~20s to 2 1/2minutes...
    - Found out that having large global arrays with preprocessor stuff is really slow to optimize for some reason.
    - Optimized compile time is now at ~3s again!

16.04.2021
- Fixed crash when rescanning and adding new file, then playing it. Forgot to set the TimeDuration string to anything.
- Added search for artist and album in song column (it just searches all three simultanioausly at this point in time).

19.04.2021
- Added the ability to cascade drag the columns, meaning that a currently dragged edge is not constraint by its direct 
  neighbourhs, instead it can push them aside if the window edge is not reached.
- Introduced layout_definition which holds all magic numbers which define the layout of the whole thing. First half done.

20.04.2021
- Added F-Keys to the four buttons in the top left corner (F5-F8).

23.04.2021
- Finished first pass to replace all magic numbers for layout in the code with one single layout_definition struct, which holds them all.

24.04.2021
- Changed fundamental struct layout for sort infos and sort batches. This is done as a first step to now implement proper playlists.

25.04.2021
- Rearanged sort_batch for proper use with playlists. 
- Added first proper playlist stuff. Which revealed that for Song FileID needs to happen through a "batch" as well.

26.04.2021
- Finished general conversion of direct usage of mp3_file_info, which is now mapped through the FileIDs array in the playlist.

29.04.2021
- Finally removed the 10k file limit for .mp3s, which was still a remnant of the initial memory management, or the lack thereof.
- Fixed double button activation in the Colorpicker
- Fixed possible Text-Overlap-flickering in the playing song Panel.

30.04.2021
- Fixed sorting bug of song column introduced while refactoring for playlists.

01.05.2021
- Fixed usage of mp3_file_info count where the new FileIDs count should now be used.
- Added simple creation of playlists by pressing F9, which makes the current selection to a playlist.
- Improved DebugLog to print Filename+Line at the start. This has overhead and can be disabled with undeffing DEBUG_LOG_INFO.

02.05.2021
- Removed now wrongly used file_id for accessing FileIDs array in playlist_column, now using playlist_id.
- More general backend refactoring.
- Fixed bug where genre column was not properly updates when creating playlist.
- Added another column named Playlists, which holds all existing playlist.
	- For now has inverted colors for differentiation.
    - First entry will always be "All" (or similarly named) which holds all songs
- Fixed bug in UpdateSeletionChanged, where I put the switch #Through in the wrong order.

03.05.2021
- Added new playlists being inserted into the playlists column.
- Playlists can now be switched with mouse-selection, similar to the other columns.
- Added saving and loading of PlaylistsGenre edge position from/to settings file.

07.05.2021
- Added Hashing of Filename+CreationDate for saving playlists

08.05.2021
- Removed Hashing of Filename+CreationDate, because using the subPath+Filename is nicer
- Now saving playlists, each in a seperate file.
- New loading the playlists from previously saved files.

09.05.2021
- Fixed sorting taking 1.2 seconds for playlist with 8k+ songs in it. Now the time is ~0.013s, which is more reasonable.
  The problem was, that it was triggering the worst case of quicksort (O(n^2)), because the list was perfectly sorted already.
  Hacky solution for now is just shuffling the list beforehand. Makes it ~95 times faster... silly.
- Reworked debug timers, which are now more flexible and useful. Downside being that they also are less performant... So using   them inside of loops which you want to measure, then it does not really matter.

10.05.2021
- Added playlist panel for playlist buttons
- Added playlist buttons: add, remove, rename (no functionality yet)
- Fixed depth issues with search button, now they do not need to be deactivated, when the window is very small. They just   dissapear behind the top border.
- Fixed bug where, if you click+hold the mouse btn und then go over a colum slot and release, it was considered a click. 
- Added start of drag&drop for adding stuff to playlists. First version of drag anim is done. Drop not working yet.

11.05.2021
- Added visual part of dropping.

12.05.2021
- Refined the dragging animation, added the "second phase" after the initial shaking-and-ripping-off animation it now follows
  the cursor like a stiff rubber-band.
- Added text and a border around the dragging slot.

13.05.2021
- Added functionality for add playlist button
- Added functionality for delete playlist button (not 100% working everytime)

14.05.2021
- Almost finished delete playlist (actual file deletion still missing)
- Adjusted the playlist save file loading. Now only the string 'MPlay3Playlist_' at the beginning and '.save' at the end is      required. Inbetween the user can put whatever they want.
- Added comments in the playlist save file which explain save position and the renaming scheme.
- Removed ID from playlist save file as it was unnecessary.

15.05.2021
- Added actual removal of the playlist file when clicking remove button. Not just in the app, but also in windows.
- Added functionality for drop from drag&drop. Now all songs that correspond to a column slot that gets dropped onto a playlist
  are added to it, except the ones that are already in it.
- Fixed bug where playlists did not show anything, when selecting an artist or album.
- Fixed bug introduced through switching columType enum around. columnType_Genre is now the zero-th position, which broke an
  if which checked for zero/non-zero (as columnType_None was 0 before). 

16.05.2021
- Added removal of slots from playlists by drag&dropping them onto the 'All' playlist.
- Added shift selection. Now holding shift while selecting will select all slots inbetween the last selected and the new one.

31.05.2021
- Fixed missing sorting for other columns, when Shuffle songs was active.
- Added visuals for removing slots from playlists. The All playlist is the "trashcan"
- Added goodbye in 50 different languages for the quit curtain.
- Added usage of .ttc files, which contain multiple fonts. Goes through all from the first and picks the first that has the
  required codepoint.

01.06.2021
- Added possibility to drop more than one slot into a playlist, when drag&dropping a selection.
- Added visuals for grabbing selections and dropping them into a playlist.
- Fixed bug where on first time insertion of slot in new playlist the text was not positioned properly.
- Fixed not updating the visuals when removing a playlist.

02.06.2021
- Stopped drag/drop when ColorPicker is open.
- Added 'official' way to disable buttons.
- Now 'Remove' and 'Rename' for playlists are disabled when 'All' is selected.
- Fixed visuals for playlist column panel and button icon sizes.
- Activated search for playlists.
- Now search gets deactivated when switching playlists.
- Introduced mode flags, which clearly define what ui elemts are active (MusicPath, ColorPicker, Search, Rename)
- Implemented renaming of playlists with the rename button.

03.06.2021
- Updated user error messages, which will now be used more often to inform the user if something goes wrong.
- Added user error messages for file serialization.
- Added playlist button for creating playlist with current selection.
- Added verification curtains for playlist buttons.
- Fixed long-standing bug with quit_animation where it falsely activated when spamming the trigger-key.
- Added a threshold for activating REMOVE for 'All' playlist when drag&dropping.
- Added saving/loading of active playlist in settings. 

04.06.2021
- Fixed off-by-one error for selecting dragging slots.
- Fixed creating playlist with wrong sizes for 'New Playlist from selection'.
- Fixed wrong filling of displayable array for 'New Playlist from selection'.
- Fixed not actually using song selection, only always displayable list for 'New Playlist from selection'.
- Added sorting of FileIds array before saving playlist to have a cleaner playlist file and subpaths are bunched together   
  properly. Making it more readable and a bit smaller as well.
- Added tooltips for the new buttons.
- Improved the drop 'recognition' that makes it more logical how the 'you are over this playlist' works.
- Adjusted the rubberband behaviour of currently dragged slots.
- Fixed calculation of drag-rip animation. The direction was wrongly calculated because of the grab-offset.

05.06.2021
- Fixed crash when no library file exists _and_ there are .mp3 files in the same calling location of the application.
- Fixed crash when rescanning the folder after you started with zero .mp3 files saved before.
- Switched to Shuffle+Quicksort for drag&drop selection sorting. Still very slow when selection is very large (much slower than  it should be, but I see no easy fix right now).
- Changed sorting policy to, when no artist & album metadata exist, use first the subpath and then the filename.
- Added support for playlist for music path and rescan stuff. If songs get deleted that are in a playlist, they will 
  automatically be removed from it.
- Added user warnings when playlists have different count than their save file said. On count of 0, we don't overwrite the
  .save file, as this indicates a different error (like the library file missing) and would otherwise nuke all playlist files.
- Fixed crash when playling song is missing and it gave the user errer, then the user pressed play anyway... Set stuff to NULL 
  after free guys!
- Now doing automatically a retrace, when we cannot find the file.

06.06.2021
- Fixed missing drag&drop remove behaviour for playlists.
- Fixed bug where the timeline unsyncs when the computer was in sleep mode.
- Added playlist saving savety with checking the creation date of the file before saving.
- Fixed bug where shuffle lead to not sorting the other display columns.
- Fixed having open search and then removing slots, then closing search, that the visuals get screwed up.
- Fixed bug where Drag&Drop doesn't like a selection that is not in displayable atm., now it will just ignore those.
- Added column edge percentages and window dimensions to the layout definition struct.

07.06.2021
- Developed a new method of getting the drag start visuals selection list. Now _much_ faster (x54 faster in debug).
- Used the same method for dropping into new playlist, which had the same performance problem.
- Switched all array_u32 copies to CopyMemory instead of going through in a for loop.
- Fixed bug where playlist serialization does not use the correct path.
- Boost performance of loading playlists, by saving the fileID when searching by subpath.
- Switched for-loop in ReallocateMemory in ArenaAllocator for faster MemoryCopy procedure.
- Fixed a long standing Heisen-Bug where suddenly the job_thread_info of the first thread is ruined. The problem had nothing to
  do with threading, rather was the arena_allocator_debub stuff. Which had a hardcoded array size for arenas, which overflowed 
  and I forgot to insert a view Asserts into the debug code. 
- Added procedure PrependString.

09.06.2021
- Fixed long standing bug where filling the song column was wrong when an album was selected. It would ignore which artist is
  selected/active and put everything from an album in the list (For collab albums with multiple Artist this was an issue).
- Fixed another bug in FillDisplayables, which was that it was also not looking at selected genres for inserting songs from  
  albums with mutliple genres.
- Fixed wrong selection after removing slots, which in turn remove the whole artist/album/genre.

10.06.2021
- Fixed bug where removing of slots in playlist would not consider the selection and remove everything that belongs to the
  slot (i.e. all 'empty' albums of every artist, even though only a specific artist was selected).
- Fixed crash when removing slots while the column from which you are removing is scrolled down and nothing above is left after
  removal.
- Aligned double-click behaviour of song column with the others, as activating the song can long since be done by clicking the 
  play button on the song itself.

11.06.2021
- Increased initial musicPath array size.
- Fixed crash on auto-selection of newly created playlist when it is offscreen.
- Added scrolling to playlist column.
- Added leading zeros to the newly created playlist ID, to make windows sorting more consistent.
- Removed Assert which checked if max playlist count was larger than the new count right _before_ adjusting the max count...
- Reintroduced a break in FillDisplayables that I took out previously because I did not really understand its purpose.
- Fixed missing 'else' and a supposed 'else if' on playlist loading, which issued the user warning twice.

08.07.2021
- Added Album sorting in song column based on release year, not just alphabetically. That now only happens if no year exists or
  they come out the same year and are from the same author.

17.07.2021
- Added per-playlist shuffle and looping.
- Fixed bug where playlist were not shuffled on playlist-switching.
- Now shuffling is persistent, even on playlist-switch/search/etc. the shuffled list stays the same order. Only pressing the shuffle button again will re-shuffle.

18.07.2021
- Added Shuffle and looping state for playlist files and they get serialized.

24.07.2021
- Added Keyboard-Mute functionality. Turned off for now, as it should only work if, for instance ctrl is pressed or something.
- Added glScissor to properly cut text and buttons to the column rects.
- Fixed crash on renaming Color-Palettes.

25.07.2021
- Fixed duplicate and wrong code for handling keyboard control. It now uses the procedures of the ui buttons.

14.08.2021
- Fixed crash when there was no settings file and a new font group needed creation, using an uninitialized array.
- Added catch for trying to push a loaded song to sound thread that is empty.
- Added adjustment of fileIDs and displayIDs, so that they still point to the right song.
- Fixed setting empty decode data for full song, when decoding failed.
- Fixed rescan only adding files if the count of previous and new files are different. Which can happen if a file is renamed.

15.08.2021
- Unified naming convention for slot variables in display column.
- Added first version of song slot height toggle. Which changes the song slots to half-height and back.
- Most likely fixed the longstanding bug where it just stops playing at the end of a song.

17.08.2021
- Fixed not updating the version of playlist save-files and the crash when loading the old version.

21.08.2021
- Added the possibillity to change font sizes.
    - All old font data gets deleted as well as the glTextures
    - New font atlas' get generated.
    - All currently drawn render_text's get recreated with new sizes.
    - Added Slot height based on font size.
    - Added resizing and positioning of slots when resizing font.

22.08.2021
- Fixed a bunch of scaling-alignment errors when resizing font. Now many things are based on font size.

09.09.2021
- Fixed BottomEdge resize. Now all things align properly when font resizing.
- Fixed playing song panel text resizing.

10.09.2021
- Fixed quit curtain language text alignment on resize.
- Added scissoring for the quit curtain goodbye text.
- Added StyleSettings and embedded colorPicker in it.

25.09.2021
- Added sliders for changing small and medium fonts.

26.09.2021
- Cleanup of font slider, added slider text.
- Added Active Font Textfield and activation button.

03.10.2021
- Added TextField scrolling when the text would go off the right side of the field.
- Fixed text width calculation. 
- Fixed wrong text alignment that were based on the wrong text width.
- Added Path validation to font pathing.
- Added Saving and loading of given custom font.

10.10.2021
- Fixed font placement, now finally using font metrics for alignment.
- Realigned every text to fit the new 'format'.
    - Now other fonts are better aligned than before.

23.10.2021
- Fixed settings window popping in startup center of app when resizing.
- Added procedures for changing original position/scale for auto-window-transform.
- Changed textures to clamp mode, stopping thin line of wrong color at some edges (i.e. colorpicker).
- Added scrissor regions for settings color-picker/font.

30.10.2021
- Fixed wrong alignment of playtime after font resize.
- Added HSV color text to color picker.
- Font size serialization.

31.10.2021
- Added Binary-Decimal-Hex conversion procedures.
- Added Hex-Color String to colorpicker.

06.10.2021
- Added info box and custom messages to Asserts.
- Fixed REMOVE text algin after dragging.
- Fixed Rename-Fields height.
- Fixed crash when trying to set Looping/Shuffle in 'All' playlist.

07.10.2021
- Fixed TextField errors after resize.
- Fixed ColorPreviews of ColorPicker for resizing.
- Added generation of Plus and PlayPause Icons.

08.11.2021
- Fixed close animation not starting at beginning when pressing the X, as dTime is long when holding the X.